@startuml
Player -> CLI: "market"
Player <- CLI: printMarket()
Player <- CLI: askMarketChoice()
Player -> CLI: Row/Column, Number
CLI -> Client: sendMarketChoice()

Client-> Server: UseMarket()



alt tryAddMarbles() == true
            Server-> GameHandler: makeAction()
             activate GameHandler

            GameHandler-> Controller: makeAction()
            activate Controller 
            activate GameTable
            Controller-> GameTable: tryAddMarbles()
            Controller<- GameTable: true
            deactivate GameTable
            Controller -> GameHandler: true
            deactivate Controller
            

else tryAdd() == false
        loop until tryAdd() == true
            Server-> GameHandler: makeAction()

            activate Controller
            GameHandler-> Controller: makeAction()
            
            activate GameTable
            Controller-> GameTable: tryAddMarbles()
            Controller<- GameTable: false
                       
      
            Controller -> GameHandler: false

            GameHandler->Server: RequestDiscardResourceMarket()
            Client<- Server: RequestDiscardResourceMarket()
            CLI<-Client: askResourceToDiscard()
            Player <- CLI: askResourceToDiscard()
            Player -> CLI: Resource
            CLI->Client: sendResourceSelection()
            
            

            

            Client-> Server: DiscardResourceMarket()

            Server-> GameHandler: DiscardResource()


            GameHandler-> Controller: DiscardResource()


            Controller-> GameTable: DiscardResourceFromTemporaryDeposit()
            deactivate GameTable
            deactivate Controller


        end
end
Server<-- GameHandler: AnswerUseMarket()

deactivate GameHandler

Client<-- Server: AnswerUseMarket()

CLI <-- Client: success()

Player <-- CLI: displaySuccess()
@enduml
