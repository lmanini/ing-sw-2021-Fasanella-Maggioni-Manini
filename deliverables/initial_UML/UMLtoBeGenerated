http://www.plantuml.com/plantuml/uml/hLXVRzis47_dfo3oPDTraFu1jXb1q3H9YmnkO-HFYwBe0oDTOg6qg95K0i_RTn-fCtqoGrd1jfT4lFiTUVpTaNVqEsE5jlL2CfC92VprmS712_-7NLcjolkvaZa__6iyvgTGALDOza4KTdwjHI6vSk9cU0MPBLIvrXKIq6Gpl2arY6mEUIVYH8fYiKD_MZZ_TDuWQC408ib52Ma4JjDZVVse-X1p3S2Y5HiYzdxRG-G9ICcYMH7nQm91iwOn-DKuGehFIYz4j_eIAgLjftgcAc3dfGLT2lb9vI3v2x_qg_tzjtjy9iKIDCD__D0fJXpnf_00KbKBAEqdeN-2ZG5J47dBZ1AcBQASYjRtIagiX7AgD9H_geG6tKaeoAjJo7uc0Btxsf8WHs_sOhChgIn3P32wbS3M3ZUYuoR8QESysHvYs7_PQw5OOWc47UplF_M0fJQ21l54LhZrKy8KccqpY10I5IPJTHyAsTYD2Oco4pJJAg_nbY4X9dO_g6SvGiHE4o2zTuePGcXyDQ_lxYJiGAolj1s8u_n1b1amzESIyaRVZ8Bmwxomy5Jy3QHKZq_bxsMTG7yfb0JRaiSfubMHoC_q3DYirjMpvaEFdm7yg05A1cMzu5SWyVvSiSkBh-paOdhpwJFx6vMHsTH_hjWhzfgz2P1BCAhM6QpO--dD6PlTNCwcP-pRsNJgPljuUVRD0JCfZE7RbyUAyT5T0JBd4swN2jnm0NQkybS3kwnWwAKLR8pfrbknKQPAwzoPEAQhm-30oy89xq4ViL5j84ZDOAFdQy2GZUR2x09C-ArI4aJ9HlTWJt2rmJ1QZzE28iztBXYsGVUp9s0imMt9JWAEZJEGqapuiTPYEIsCFTpKcwFl7cpdFzYuQgxIcJA53niwXTVhItuUNFAEUxi1xObAebT-AJAhz7Ac7C0CXkJ4QA4U0ESRu3_QYDk7k3LMYynIF-1tOZ279bjrlcSTfmn0eYTkTlXgvona6JL1pxUBcwC-IwA06FKKFBGD2Dv53I-Cxo6s6E54YPT71i9zF0ZhJM8d0ihxuJTZjh9YiyUZU9P0GjIAhVfms93ruQWjsusaRgmVXsrPFyvpsuKAZP1dwyuRXBCK7O8FZKuybbj1gehi9vKNhw9HM27gLln2jO6ywH8cl3dPX3XYO_4W2Ybk9QGHU9mJouqCLaY_I9GMX78i94XuMYBv5f1mKJdkmL5Hxi1XP-KfMVWwYRdgFxw_-V7zhRlVJ2Kqe2Ye_FvBqCB2jMTfCEGJf4JH1SVNjA45KdQf7ZlrmHyy9CwTqWNsirZ0n1URehnduqn8iH25edempgaQ-gsQzQHHeNGXbKsJ4sEmzJaAbxWBjtNhpMZWC_91QJp4xK8GfCvsBWmsQOLLvUzAocNBGGEsDTsWzJtqZ7lk9w4fxt7ICsX16nUyaQ5F9qLxp-xvcjs8N0Bv4AL18G5SVJNr0lIWhHow0D_MozDjkaCmswKwefvoZXhPGJ96tVMyjsvDYJUlYfYZt4e-Ajon2768_AAdXFEXKbNpEUZSQdePVEguVCwwynEtUAsgGOh0IeeC6heZLNDx78SR9bBwViQF9ickqRcZZEraVEoRlIUMrqxeZiecZkTbLU-OWu0NjTs9xAZL8U6tBynH9ifZ6eUZbcOVc_fLGacjV5fD3NnAJMrxIak9itBXIuUrLHieLLV8F9-qPCXwLpkZuO-wqE2dD9q44v5fxYA2SomO_jjREWUyFFA8TXs_85VUA_JXMhs788PymeDlwH8OlrR_uqJqCFu_NABhwrzFjd46NrhufEfwhOHhXiAH3guhfE6Re07MSJpe5udO5tppRJ_vA54nBFwjEEQPaag7Xk343nXljNTOwDpcUTD6Du31S1iVNDhy5i1NoJa8IByFF0-A1_XvM7zHz2FfjuLkx3ieyteX_m40@startuml
scale 2000*2000
Stronghold <|-- Deposit
FaithTrail o-- FaithSection
FaithTile <|-- FaithTileUnreached
FaithTile <|-- FaithTileClaimed
FaithTile <|-- FaithTileDiscarded
FaithSection <|-- FaithSectionOne
FaithSection <|-- FaithTile
FaithSection <|-- FaithSectionTwo
FaithSection <|-- FaithSectionThree
FaithSectionOne o-- "9" FaithCell
FaithSectionTwo o-- "8" FaithCell
FaithSectionThree o-- "8" FaithCell
FaithCell <|-- FaithCellNormal
FaithCell <|-- FaithCellReport
FaithCell <|-- FaithCellPope
InternalModel *-- "1..4" Player
Player <-- CardDevelopmentMarket
Player <-- CardLeader
Player <-- Deposit
Player <-- Stronghold
InternalModel <-- FaithTrail
InternalModel <-- Lorenzo
InternalModel <-- Market
InternalModel <-- CardLeaderDeck
InternalModel <-- CardDevelopmentMarket
Player <-- Market
Player *-- "3" CardDevelopmentSlot
Market <-- Marble
Lorenzo <-- ActionCardDeck
ActionCardDeck o-- "7" ActionCard
CardDevelopmentSlot o-- "0..3" CardDevelopment
CardDevelopmentMarket o-- CardDevelopmentStack
CardDevelopmentStack o-- CardDevelopment
CardLeaderDeck o-- CardLeaderDiscount
CardLeaderDeck o-- CardLeaderMarble
CardLeaderDeck o-- CardLeaderDeposit
CardLeaderDeck o-- CardLeaderProduction
CardLeader <|-- CardLeaderProduction
CardLeader <|-- CardLeaderDeposit
CardLeader <|-- CardLeaderMarble
CardLeader <|-- CardLeaderDiscount
ActionCard <|-- ActionCardShuffle
ActionCard <|-- ActionCardDiscard
ActionCard <|-- ActionCardAdvance
MarbleRed<|-- Marble
MarbleWhite<|-- Marble
MarbleYellow<|-- Marble
MarbleBlue<|-- Marble
MarbleViolet<|-- Marble
CardDevelopment<|--CardDevelopmentBlue
CardDevelopment<|--CardDevelopmentPurple
CardDevelopment<|--CardDevelopmentYellow
CardDevelopment<|--CardDevelopmentGreen
enum Selection{
ROW
COLUMN
}
enum CardDevelopmentLevel{
1
2
3
}
enum Resource{
BLUE
PURPLE
YELLOW
GREY
}
class InternalModel {
 +field : tyoe
 +method1(type): type
}
class Stronghold{
+content: Map<Resource,integer>
+useResources(Resource, integer)
+hasResources(Resource, integer): boolean
+getContent(): Map<Resource, integer>
+addResources(Resource, integer)

}
class FaithTrail {
-lenght: integer
-cells: ArrayList<FaithCell>[length]
-playerPosition: Map<Player, Integer>
+getCell(integer): FaithCell
+getVictoryPoints(): integer
+movePlayer(Player, integer)
}
abstract FaithTile {
-section: FaithSection
+getVictoryPoints(): integer
+getSection
}
class FaithTileUnreached {
+getVictoryPoints(): integer
}
class FaithTileClaimed {
+getVictoryPoints(): integer
}
class FaithTileDiscarded {
+getVictoryPoints(): integer
}
abstract FaithCell {
-victoryPoints: integer
-section: FaithSection
+ isPope(): integer
+ getSection(): FaithSection
+ activate():
}
abstract FaithSection {
-Tiles: Map<Player,FaithTile>
+ activate():
}
class FaithSectionOne {
+ activate():
}
class FaithSectionTwo {
+ activate():
}
class FaithSectionThree {
+ activate():
}
class FaithCellNormal {
+ activate():
}
class FaithCellReport {
+ activate():
}
class FaithCellPope {
+ activate():
}
class Lorenzo {
-faithPosition: integer
+moveFaithPawn(): integer
+pickActionCard(): ActionCard
}
class ActionCardDeck {
-usedStack: List<ActionCard>
-availableStack: List<ActionCard>
+getCard(): ActionCard
+shuffleDeck():
}
abstract ActionCard{
+activate():
}
class ActionCardAdvance {
+activate()
}
class ActionCardShuffle {
+activate()
}
class ActionCardDiscard {
+activate()
}
class Market {
-marbles: Marble[3][4]
-spareMarble: Marble
+generateTable() :
+getCol(integer) : List<Marble>
+getRow(integer) : List<Marble>
}
class Player{
-nickName: String
-calamaio: boolean
-developmentCards: List<CardDevelopment>
-leaderCards: List<CardLeader>
-playerState: PlayerState
-favorTiles: ArrayList<FavorTile>
-hasProducitonJolly: boolean
-setPlayerState(PlayerState)
-market: Market
-leaderCards: List<CardLeader>
+getters()
+setters()
+getMarketRow(Integer): List<Marble>
+getMarketCol(Integer): List<Marble>
-marbleConsumer(List<Marble>):
+buyDevelopmentCard(integer, integer): CardDevelopment
+activateProduction(List<CardDevelopment>): Map<Resource, integer>
+getVictoryPoints(): integer
+getLeaderCards(): List<CardLeader>
}
class CardDevelopmentMarket{
+market: List<CardDevelopmentStack>
+popStack(integer): CardDevelopment
}
class CardDevelopmentSlot{
-cards: List<CardDevelopment>
+getTop(): CardDevelopment
+placeCard(CardDevelopment):
}
Abstract CardDevelopment{
-level: CardDevelopmentLevel
-cost: Map<Resource, integer>
-type: CardDevelopmentType
-productionInput: Map<Resource, integer>
-productionOutput: Map<Resource, integer>
-victoryPoints: integer
+getters
+activate():
+canActivate(): boolean
}
class CardDevelopmentBlue{
}
class CardDevelopmentPurple{
}
class CardDevelopmentYellow{
}
class CardDevelopmentGreen{
}
class CardDevelopmentStack{
+pop(): CardDevelopment
}
abstract CardLeader{
-type : CardLeaderType
-victoryPoints: integer
-requirements: Map<Resource, integer>
+getters
+canActivate(): boolean
+activate():
+discard():
+getType():CardLeaderType
}
class CardLeaderDiscount{
-resourceToBeDiscounted: Resource
+activate():
}
class CardLeaderMarble{
-resourceToBeDiscounted: Resource
+activate():
}
class CardLeaderDeposit{
-resourceToBeDiscounted: Resource
+activate():
}
class CardLeaderProduction{
-resourceToBeDiscounted: Resource
+activate():
}
class Deposit{
+field: type
+addResources(Resource,integer)
+discard(Map<Resource, integer>) : integer
+discard(Resource): boolean
}
class CardLeaderDeck{
+field: type
+method(type): type
}
abstract Marble {
 - color: MarbleColor
 + activate(Player):
 + getColor(): MarbleColor
}
class MarbleRed {
 + activate(Player):
}
class MarbleWhite {
 + activate(Player):
}
class MarbleYellow {
 + activate(Player):
}
class MarbleBlue {
 + activate(Player):
}
class MarbleViolet {
 + activate(Player):
}
@enduml