http://www.plantuml.com/plantuml/png/hLTVRzis47_dfo3oPDTraFuP1WX1KDTsrmnE8jXEYg8e2aQwn49fKICf5rwsxpvI57qoAod0jXTRlFlnxdV7uv5yfpIJkjnoeXB6WRu-EpjxON_8IakHFsu4J-dvN-CndK4XLAR91vRfpLgoZDCNHdpo-fSJMiccm3cvp3N8dF4haK8DU7Lw-lQ4nfpjGJPddnkb6sOSYDDNmYcJwGnsm4MnXLnVCVaTT0XO04j1eXG9DaGOGq3CAf5AYt8X9EH_YXQDezEYG5OpIBwt0_hZEfAuvBqv2QUjkD348VsaUmwa9bo99edEHExc6IR7GogitLzF6YZIuiB1pavFVsP0sW9n4q93cXd_RS8sD6bcq4DGbAb4bC-XN3RwCRvGUa6n56bPPQY1SplXUL2NEqJqamu063kkcOFWUBKf7nuuz22i4VFNWvYaEvOdG1oV9QILterguQTDfk5dyMVWNFpuMVwUbotekqnmq4qvvEMMhe13nUM9B6y-aUdDulRgclpjbDLkNNdzA_AQlF4gstZM-mAUoFNDycgo8CjvVBDSa_WcddzRnPFfl4PYkp4rg4jb9wo_BUUJwSVvZDnD5fSpChjSJIVBcHcxEM6HBkndG609IfGoCGJUBsxd9BvTneiv-JnVB4mOlotddpqGK-turix8wkFjXmzcocHsDxb6ke5hDwVTnTmcAk5CANhSU9u87Jram5CQKRqNO8PRq1kHlXfeOszefGKS9cF7V2AZH1XJkOxCAXNdFiYNcH4-WhmWerA1bwh1GKzhm92CDapr0I9wBmG7bfFH8-YfypOO1lueEcHfsklGXu6ztIPWpC64f2EF8-C4E5SHdKZ9zejCwVF30NRnnOBrvYiP5rKRZeNAxA8vKgurlwINdf8bRkSDCAQ3hKfvboLQo7qi340DXaXYj1KxSFO6tgmtWd7uWhLXgAfeex2AZS9jY-Xeax3AlODOl-6iaK9jBrCaumEpP6pLH8Ujry61Z7TDeutWQQPYKS1HGgZbwoPQkRVXtViJpZX_i3xyoWGfhVp7x4T-PBl8ak-u-wmAHzv3S6vQHwM2j3gl8bhL2I8ko9ZjMCQPQLzT29lL5dSZvNgrTM9LnZ-xLrgoH3TWFiT1qwYCsWyqYYfcnZkchGw32jixVMe2GnmU9VquF50wSEvMO9EuhNgyYkfc_-NDrozlpVvI1PFWH5vbWyj16aDharTZZKQqxWsumsYTQJV5PNafVdJgFI6toGoVtDJ2DTj2PBjTbZ-QVi0usx9CO4CQfzXtRQogDXgqv0jgkuizeaEGExWlV1knEyquZ75WgtWdfDsHGIkgfMQkwP_kYf5faVykEDyt62hG3NE3nlUGsgJRz4VrClIpT3dK8AjMeF3JIDrycz_BEhz1UX5a5ga3v6l0j7XLRa4EcafJgwFxSZyxJhXVpkPf4IGVomxlOOFMLUe-KlfRj54kC6z65MOEgwlrJcnsXby7v1NSX0s7GXJLvw0pr7OtxgPkAZhfgL3NC4GnQ4kWASu4gdG7gc7KvTAUftOKjTwC31UXT6UwNKjhkzYOZN9OnCkyA7ji8F2crBt8ZjF7L_jnmnmbB9_Ws6yqp4FBufa5BjfJs-ZfM2vrJwTHG-Q2xs0wbl17cKcm9bLdd1XFUmX1dAdhszKt7YO18umwV8IO86JDOItUWnT36b7FhVqa2Xyy_zKGlgt-1qlOGlwriGCPT-5sD-kkI-lXgZVsoz6-k4Dwg0Q4UbX7bUAZDkJYhlx7DtyiLBSiziamfedWGlfpUMe7X8ve5JQUDYPuMbtRAi1WU8ptb0xFIMVvuN0tZnhtz5RhQ08VdzP8FnGVfCzXyP7wF18VhjtOTv2dvPR_0m00
@startuml
scale 2000*2000
Stronghold <|-- Deposit
FaithTrail *-- "25" FaithCell
InternalModel *-- "1..4" Player
FaithTrail <-- FaithTile
Player <-- CardDevelopmentMarket
Player <-- CardLeader
Player <-- Deposit
Player <-- Stronghold
InternalModel <-- FaithTrail
InternalModel <-- Lorenzo
InternalModel <-- Market
InternalModel <-- CardLeaderDeck
InternalModel <-- CardDevelopmentMarket
Player <-- Market
Player *-- "3" CardDevelopmentSlot
Market <-- Marble
Lorenzo <-- ActionCardDeck
ActionCardDeck o-- "7" ActionCard
CardDevelopmentSlot o-- "0..3" CardDevelopment
CardDevelopmentMarket o-- CardDevelopmentStack
CardDevelopmentStack o-- CardDevelopment
CardLeaderDeck o-- CardLeaderDiscount
CardLeaderDeck o-- CardLeaderMarble
CardLeaderDeck o-- CardLeaderDeposit
CardLeaderDeck o-- CardLeaderProduction
CardLeader <|-- CardLeaderProduction
CardLeader <|-- CardLeaderDeposit
CardLeader <|-- CardLeaderMarble
CardLeader <|-- CardLeaderDiscount
ActionCard <|-- ActionCardShuffle
ActionCard <|-- ActionCardDiscard
ActionCard <|-- ActionCardAdvance
MarbleRed<|-- Marble
MarbleWhite<|-- Marble
MarbleYellow<|-- Marble
MarbleBlue<|-- Marble
MarbleViolet<|-- Marble
enum Selection{
ROW
COLUMN
}
enum FaithSection{
1
2
3
}
enum CellType{
NORMAL
REPORT
POPE_SPACE
}
enum FaithTileStatus{
NOT_REACHED
VALID
DISCARDED
}
enum CardDevelopmentLevel{
1
2
3
}
enum Resource{
BLUE
PURPLE
YELLOW
GREY
}
enum ActionCardType{
DISCARD
SHUFFLE
ADVANCE
}
enum CardDevelopmentType{
BLUE
PURPLE
YELLOW
GREEN
}
class InternalModel {
 +field : tyoe
 +method1(type): type
}
class Stronghold{
+content: Map<Resource,integer>
+useResources(Resource, integer)
+hasResources(Resource, integer): boolean
+getContent(): Map<Resource, integer>
+addResources(Resource, integer)

}
class FaithTrail {
-lenght: integer
-cells: ArrayList<FaithCell>[length]
-playerPosition: Map<Player, Integer>
+getCell(integer): FaithCell
+getVictoryPoints(): integer
+movePlayer(Player, integer)
}
class FaithTile {
-status: FaithTileStatus
-section: FaithSectiona
+getStatus(): FaithTileStatus
+setStatus()
+getVictoryPoints(): integer
}
class FaithCell {
-type: CellType
-section: FaithSection
-victoryPoints: integer
+ isPope(): integer
+ getSection(): Section
}
class Lorenzo {
-faithPosition: integer
+moveFaithPawn(): integer
+pickActionCard(): ActionCard
}
class ActionCardDeck {
-usedStack: List<ActionCard>
-availableStack: List<ActionCard>
+getCard(): ActionCard
+shuffleDeck():
}
abstract ActionCard{
-type: ActionCardType
+getType(): ActionCardType
+activate():
}
class ActionCardAdvance {
+activate()
}
class ActionCardShuffle {
+activate()
}
class ActionCardDiscard {
+activate()
}
class Market {
-marbles: Marble[3][4]
-spareMarble: Marble
+generateTable() :
+getCol(integer) : List<Marble>
+getRow(integer) : List<Marble>
}
class Player{
-nickName: String
-calamaio: boolean
-developmentCards: List<CardDevelopment>
-leaderCards: List<CardLeader>
-playerState: PlayerState
-favorTiles: ArrayList<FavorTile>
-hasProducitonJolly: boolean
-setPlayerState(PlayerState)
-market: Market
-leaderCards: List<CardLeader>
+getters()
+setters()
+getMarketRow(Integer): List<Marble>
+getMarketCol(Integer): List<Marble>
-marbleConsumer(List<Marble>):
+buyDevelopmentCard(integer, integer): CardDevelopment
+activateProduction(List<CardDevelopment>): Map<Resource, integer>
+getVictoryPoints(): integer
+getLeaderCards(): List<CardLeader>
}
class CardDevelopmentMarket{
+market: List<CardDevelopmentStack>
+popStack(integer): CardDevelopment
}
class CardDevelopmentSlot{
-cards: List<CardDevelopment>
+getTop(): CardDevelopment
+placeCard(CardDevelopment):
}
class CardDevelopment{
-level: CardDevelopmentLevel
-cost: Map<Resource, integer>
-type: CardDevelopmentType
-productionInput: Map<Resource, integer>
-productionOutput: Map<Resource, integer>
-victoryPoints: integer
+getters
+activate():
+canActivate(): boolean
}
class CardDevelopmentStack{
+pop(): CardDevelopment
}
abstract CardLeader{
-type : CardLeaderType
-victoryPoints: integer
-requirements: Map<Resource, integer>
+getters
+canActivate(): boolean
+activate():
+discard():
+getType():CardLeaderType
}
class CardLeaderDiscount{
-resourceToBeDiscounted: Resource
+activate():
}
class CardLeaderMarble{
-resourceToBeDiscounted: Resource
+activate():
}
class CardLeaderDeposit{
-resourceToBeDiscounted: Resource
+activate():
}
class CardLeaderProduction{
-resourceToBeDiscounted: Resource
+activate():
}
class Deposit{
+field: type
+addResources(Resource,integer)
-discard(Map<Resource, integer>) : integer
-discard(Resource): boolean
}
class CardLeaderDeck{
+field: type
+method(type): type
}
abstract Marble {
 - color: MarbleColor
 + activate(Player):
 + getColor(): MarbleColor
}
class MarbleRed {
 - faithTrail: FaithTrail
 + activate(Player):
}
class MarbleWhite {
 + activate(Player):
}
class MarbleYellow {
 + activate(Player):
}
class MarbleBlue {
 + activate(Player):
}
class MarbleViolet {
 + activate(Player):
}
@enduml