@startuml
scale 2000*2000
FaithTrail <-- FaithTile
FaithTrail *-- "25" FaithCell
Stronghold <|-- Deposit
InternalModel *-- "1..4" Player
Player <-- CardDevelopmentMarket
Player <-- CardLeader
Player <-- Deposit
Player <-- Stronghold
InternalModel <-- FaithTrail
InternalModel <-- Lorenzo
InternalModel <-- Market
InternalModel <-- CardLeaderDeck
InternalModel <-- CardDevelopmentMarket
Player <-- Market
Player *-- "3" CardDevelopmentSlot
Market <-- Marble
Lorenzo <-- ActionCardDeck
ActionCardDeck o-- "7" ActionCard
CardDevelopmentSlot o-- "0..3" CardDevelopment
CardDevelopmentMarket o-- CardDevelopmentStack
CardDevelopmentStack o-- CardDevelopment
CardLeaderDeck o-- CardLeaderDiscount
CardLeaderDeck o-- CardLeaderMarble
CardLeaderDeck o-- CardLeaderDeposit
CardLeaderDeck o-- CardLeaderProduction
CardLeader <|-- CardLeaderProduction
CardLeader <|-- CardLeaderDeposit
CardLeader <|-- CardLeaderMarble
CardLeader <|-- CardLeaderDiscount
ActionCard <|-- ActionCardShuffle
ActionCard <|-- ActionCardDiscard
ActionCard <|-- ActionCardAdvance
MarbleRed<|-- Marble
MarbleWhite<|-- Marble
MarbleYellow<|-- Marble
MarbleBlue<|-- Marble
MarbleViolet<|-- Marble
CardDevelopment<|--CardDevelopmentBlue
CardDevelopment<|--CardDevelopmentPurple
CardDevelopment<|--CardDevelopmentYellow
CardDevelopment<|--CardDevelopmentGreen
skinparam  class {
    BackgroundColor<<Enumeration>> #A9DCDF
    BackgroundColor<<Abstract>> #f7d305
}
enum FaithSection <<Enumeration>> {
1
2
3
}
enum FaithTileStatus <<Enumeration>>{
NOT_REACHED
VALID
DISCARDED
} 
enum Selection{
ROW
COLUMN
}
enum CardDevelopmentLevel <<Enumeration>>{
1
2
3
}
enum Resource <<Enumeration>>{
BLUE
PURPLE
YELLOW
GREY
}
class InternalModel {
 +field : tyoe
 +method1(type): type
}
class Stronghold{
+content: Map<Resource,integer>
+useResources(Resource, integer)
+hasResources(Resource, integer): boolean
+getContent(): Map<Resource, integer>
+addResources(Resource, integer)

}
class FaithTrail {
-lenght: integer
-cells: ArrayList<FaithCell>[length]
-playerPosition: Map<Player, Integer>
+getCell(integer): FaithCell
+getVictoryPoints(): integer
+movePlayer(Player, integer)
}
class FaithTile {
-status: FaithTileStatus
-section: FaithSectiona
+getStatus(): FaithTileStatus
+setStatus()
+getVictoryPoints(): integer
}
class FaithCell {
-type: CellType
-section: FaithSection
-victoryPoints: integer
+ isPope(): integer
+ getSection(): Section
}
class Lorenzo {
-faithPosition: integer
+moveFaithPawn(): integer
+pickActionCard(): ActionCard
}
class ActionCardDeck {
-usedStack: List<ActionCard>
-availableStack: List<ActionCard>
+getCard(): ActionCard
+shuffleDeck():
}
abstract ActionCard <<Abstract>>{
+activate():
}
class ActionCardAdvance {
+activate()
}
class ActionCardShuffle {
+activate()
}
class ActionCardDiscard {
+activate()
}
class Market {
-marbles: Marble[3][4]
-spareMarble: Marble
+generateTable() :
+getCol(integer) : List<Marble>
+getRow(integer) : List<Marble>
}
class Player{
-nickName: String
-calamaio: boolean
-developmentCards: List<CardDevelopment>
-leaderCards: List<CardLeader>
-playerState: PlayerState
-favorTiles: ArrayList<FavorTile>
-hasProducitonJolly: boolean
-setPlayerState(PlayerState)
-market: Market
-leaderCards: List<CardLeader>
+getters()
+setters()
+getMarketRow(Integer): List<Marble>
+getMarketCol(Integer): List<Marble>
-marbleConsumer(List<Marble>):
+buyDevelopmentCard(integer, integer): CardDevelopment
+activateProduction(List<CardDevelopment>): Map<Resource, integer>
+getVictoryPoints(): integer
+getLeaderCards(): List<CardLeader>
}
class CardDevelopmentMarket{
+market: List<CardDevelopmentStack>
+popStack(integer): CardDevelopment
}
class CardDevelopmentSlot{
-cards: List<CardDevelopment>
+getTop(): CardDevelopment
+placeCard(CardDevelopment):
}
Abstract CardDevelopment <<Abstract>>{
-level: CardDevelopmentLevel
-cost: Map<Resource, integer>
-type: CardDevelopmentType
-productionInput: Map<Resource, integer>
-productionOutput: Map<Resource, integer>
-victoryPoints: integer
+getters
+activate():
+canActivate(): boolean
}
class CardDevelopmentBlue{
}
class CardDevelopmentPurple{
}
class CardDevelopmentYellow{
}
class CardDevelopmentGreen{
}
class CardDevelopmentStack{
+pop(): CardDevelopment
}
abstract CardLeader <<Abstract>>{
-type : CardLeaderType
-victoryPoints: integer
-requirements: Map<Resource, integer>
+getters
+canActivate(): boolean
+activate():
+discard():
+getType():CardLeaderType
}
class CardLeaderDiscount{
-resourceToBeDiscounted: Resource
+activate():
}
class CardLeaderMarble{
-resourceToBeDiscounted: Resource
+activate():
}
class CardLeaderDeposit{
-resourceToBeDiscounted: Resource
+activate():
}
class CardLeaderProduction{
-resourceToBeDiscounted: Resource
+activate():
}
class Deposit{
+field: type
+addResources(Resource,integer)
+discard(Map<Resource, integer>) : integer
+discard(Resource): boolean
}
class CardLeaderDeck{
+field: type
+method(type): type
}
abstract Marble <<Abstract>>{
 - color: MarbleColor
 + activate(Player):
 + getColor(): MarbleColor
}
class MarbleRed {
 + activate(Player):
}
class MarbleWhite {
 + activate(Player):
}
class MarbleYellow {
 + activate(Player):
}
class MarbleBlue {
 + activate(Player):
}
class MarbleViolet {
 + activate(Player):
}
@enduml
