http://www.plantuml.com/plantuml/uml/hLZVRzku3t_NNs7qALcMeli1VBzd5CMwjZViaAr1scuOXZseDjiOKooV9BVevUv_Fz6CorYrdEBkNbgR_92YFgH5Ak-iayRLAoLi9XKahmyE3bxW7t7XZ2vlbrhboU6Vqsbo2fMsXHE_oi8jBuqiLAAzk7czWCmLkjpe2WLaylXwLHgGsHBoAE94oM8re3yjV7mcRn2y88DQoNa9CGIwsM5zUQzt8PO6G0GhDaJi_R97o1DGIWHU2V7_A0AznZ3ur0J2Yi_Qh6HSlO1A6nTLptK5ucFfm9HIVT8vgEG5BlrgV__jNZ9NyW6Ce7_9eLUSUE9FuGwKhbPGka_I_0GN0cOWywuP5Km7o3KLh8zABgmUvKmRAF_GFHeAfqV1KPr2zZC26DnNHq8SlTaBpIwKTeAGhT6r0h49k14TDqacEnz9zvNI_h-zBPJeMO9W1_lxJoCGVHiXWz2HatxzFc4VMdGP90YB2flfUXUAs1Z6j8Ko29eRdTTqoh2G2ditAB9S1C51Hm2yTyuPGVZzObdVt2WOG6oEj074SNudomm4nRE0lD7JsqRuTLauU2h-1ahf-wVozwhkGNyfj0At9GzB15M123qz0pQlJVKiVnJnCu0V340feAnNoGKeEZ_NOd7-LPoSpwu-VHP_aJ8mc-7ZMhmIhyMR5h80gskJmLgydrsTYVdLOZux4z_EPZFlxSFYx9i7PafQctGFZxL89ZS5g3n94_UWmR-km2rr_cha7YeOexI2HsC-zTPYacdlgdIfPxewR0DuMNZXBPWZCQajj58xUjGd6y1OJ9RI3W7Iv5fh1R8Karjm9xJQQ1oib_22Ciy75sotmUSp4Z1LuBVaqXOdfXaePTFas1ZvC2kiEtpiDqVV4UoMFyIqQexIkRO5fes2ekFr9N9C8M7WQ3VYFN5BHEMN8dFQFCor1zZHc8EOhFGTaByH_UED-7t8Q-kCp1pF0xWJIpMKTlhyy3geR85CJpZi9Ej1BsmP347Fjmk7ersMJ04pYXJSRHimF4PDKbYS8JgC94m9oWC3wH_kf4EJRX2CmZXmCxPJ5Ln9g3iwwlfYAeA1R3s8ux4iZWk7iq4apsJ3E1xETkEGuHYg7OUGiniqu2-gyoaqpkRolkoagYgodznaKCLlxGh1p88BrHRoPbP8aoOhZ3WIKtad2oMl5SGGM9SzoqqizKbS92WEHdaMUaXusYYJ3Z34SLCUnd5hZk1ela9ALjWjgMBnuVkR7z_V-bFELj80YLeLxhy4unrT8akZSP8I9PgFkMH36raGPGjz7zMtyT2duiCfVM8_onMas7AAybPCCwdaIXQQky8qvvw8MxKRfq6xz2bLpQWJOcW0EcgFSfzkvzURymjMv9qs-Bbssq4hzRPBQMbKAvmkVzDAFMm5QC5jkHjjFO-HSUG-tUHWE4XYq86nFdaJouzUYlR4xiSDkrro6OGfYe3Q0l1TrjOhCADjvTWd-Bf-EEtItIPpks47r7FDyJWxwirHlAllx5upvWrL0NDSMxrN2_zPK1xOyCc5miTGwQfv7CMt6ba6BpnhhDveVT8MBtKrwYEmKZA3Xkv0rPmUn-q94oXngi6tj7TszE5ewwACJt7aUs9vwOLYMZtcyMDPrGC-67XUkm5aj6Et1TyzC2UPB8_vlVtKOkpZQB-EAMcWZwffZ8-fQNYFQQbmrbWuVMdTxWrSgcjYFactPCXwVAWny7jT642NDaOm4ndXBY0ufuQ1psZf0q1v417lEhn7hZ4gYk5IluTM37cQjB7rjy3mplfl7V7r-3_mnCVNFtRs60pTj-XY5RkpjCSCfwC_kRwHjiyCRM6HpuD_bmXZePjVz-B7XKffmHlZDCcqqgOT24xmHIIRyOuRtJX58Kq6sep6NNmR4iaMEF7t-c0W_qhmF2XzmC_3ua6n6yc_CCInxw3CwvNw6m00
@startuml
scale 2000*2000
Stronghold <|-- Deposit
FaithTrail o-- FaithSection
FaithTile <|-- FaithTileUnreached
FaithTile <|-- FaithTileClaimed
FaithTile <|-- FaithTileDiscarded
FaithSection <|-- FaithSectionOne
FaithSection <|-- FaithTile
FaithSection <|-- FaithSectionTwo
FaithSection <|-- FaithSectionThree
FaithSectionOne o-- "9" FaithCell
FaithSectionTwo o-- "8" FaithCell
FaithSectionThree o-- "8" FaithCell
FaithCell <|-- FaithCellNormal
FaithCell <|-- FaithCellReport
FaithCell <|-- FaithCellPope
InternalModel *-- "1..4" Player
Player <-- CardDevelopmentMarket
Player <-- CardLeader
Player <-- Deposit
Player <-- Stronghold
InternalModel <-- FaithTrail
InternalModel <-- Lorenzo
InternalModel <-- Market
InternalModel <-- CardLeaderDeck
InternalModel <-- CardDevelopmentMarket
Player <-- Market
Player *-- "3" CardDevelopmentSlot
Market <-- Marble
Lorenzo <-- ActionCardDeck
ActionCardDeck o-- "7" ActionCard
CardDevelopmentSlot o-- "0..3" CardDevelopment
CardDevelopmentMarket o-- CardDevelopmentStack
CardDevelopmentStack o-- CardDevelopment
CardLeaderDeck o-- CardLeaderDiscount
CardLeaderDeck o-- CardLeaderMarble
CardLeaderDeck o-- CardLeaderDeposit
CardLeaderDeck o-- CardLeaderProduction
CardLeader <|-- CardLeaderProduction
CardLeader <|-- CardLeaderDeposit
CardLeader <|-- CardLeaderMarble
CardLeader <|-- CardLeaderDiscount
ActionCard <|-- ActionCardShuffle
ActionCard <|-- ActionCardDiscard
ActionCard <|-- ActionCardAdvance
MarbleRed<|-- Marble
MarbleWhite<|-- Marble
MarbleYellow<|-- Marble
MarbleBlue<|-- Marble
MarbleViolet<|-- Marble
CardDevelopment<|--CardDevelopmentBlue
CardDevelopment<|--CardDevelopmentPurple
CardDevelopment<|--CardDevelopmentYellow
CardDevelopment<|--CardDevelopmentGreen
enum Selection{
ROW
COLUMN
}
enum CardDevelopmentLevel{
1
2
3
}
enum Resource{
BLUE
PURPLE
YELLOW
GREY
}
class InternalModel {
 +field : tyoe
 +method1(type): type
}
class Stronghold{
+content: Map<Resource,integer>
+useResources(Resource, integer)
+hasResources(Resource, integer): boolean
+getContent(): Map<Resource, integer>
+addResources(Resource, integer)

}
class FaithTrail {
-lenght: integer
-cells: ArrayList<FaithCell>[length]
-playerPosition: Map<Player, Integer>
+getCell(integer): FaithCell
+getVictoryPoints(): integer
+movePlayer(Player, integer)
}
abstract FaithTile {
-section: FaithSection
+getVictoryPoints(): integer
+getSection
}
class FaithTileUnreached {
+getVictoryPoints(): integer
}
class FaithTileClaimed {
+getVictoryPoints(): integer
}
class FaithTileDiscarded {
+getVictoryPoints(): integer
}
abstract FaithCell {
-victoryPoints: integer
-section: FaithSection
+ isPope(): integer
+ getSection(): FaithSection
+ activate():
}
abstract FaithSection {
-Tiles: Map<Player,List<FaithTile>>
+ activate():
}
class FaithSectionOne {
+ activate():
}
class FaithSectionTwo {
+ activate():
}
class FaithSectionThree {
+ activate():
}
class FaithCellNormal {
+ activate():
}
class FaithCellReport {
+ activate():
}
class FaithCellPope {
+ activate():
}
class Lorenzo {
-faithPosition: integer
+moveFaithPawn(): integer
+pickActionCard(): ActionCard
}
class ActionCardDeck {
-usedStack: List<ActionCard>
-availableStack: List<ActionCard>
+getCard(): ActionCard
+shuffleDeck():
}
abstract ActionCard{
+activate():
}
class ActionCardAdvance {
+activate()
}
class ActionCardShuffle {
+activate()
}
class ActionCardDiscard {
+activate()
}
class Market {
-marbles: Marble[3][4]
-spareMarble: Marble
+generateTable() :
+getCol(integer) : List<Marble>
+getRow(integer) : List<Marble>
}
class Player{
-nickName: String
-calamaio: boolean
-developmentCards: List<CardDevelopment>
-leaderCards: List<CardLeader>
-playerState: PlayerState
-favorTiles: ArrayList<FavorTile>
-hasProducitonJolly: boolean
-setPlayerState(PlayerState)
-market: Market
-leaderCards: List<CardLeader>
+getters()
+setters()
+getMarketRow(Integer): List<Marble>
+getMarketCol(Integer): List<Marble>
-marbleConsumer(List<Marble>):
+buyDevelopmentCard(integer, integer): CardDevelopment
+activateProduction(List<CardDevelopment>): Map<Resource, integer>
+getVictoryPoints(): integer
+getLeaderCards(): List<CardLeader>
}
class CardDevelopmentMarket{
+market: List<CardDevelopmentStack>
+popStack(integer): CardDevelopment
}
class CardDevelopmentSlot{
-cards: List<CardDevelopment>
+getTop(): CardDevelopment
+placeCard(CardDevelopment):
}
Abstract CardDevelopment{
-level: CardDevelopmentLevel
-cost: Map<Resource, integer>
-type: CardDevelopmentType
-productionInput: Map<Resource, integer>
-productionOutput: Map<Resource, integer>
-victoryPoints: integer
+getters
+activate():
+canActivate(): boolean
}
class CardDevelopmentBlue{
}
class CardDevelopmentPurple{
}
class CardDevelopmentYellow{
}
class CardDevelopmentGreen{
}
class CardDevelopmentStack{
+pop(): CardDevelopment
}
abstract CardLeader{
-type : CardLeaderType
-victoryPoints: integer
-requirements: Map<Resource, integer>
+getters
+canActivate(): boolean
+activate():
+discard():
+getType():CardLeaderType
}
class CardLeaderDiscount{
-resourceToBeDiscounted: Resource
+activate():
}
class CardLeaderMarble{
-resourceToBeDiscounted: Resource
+activate():
}
class CardLeaderDeposit{
-resourceToBeDiscounted: Resource
+activate():
}
class CardLeaderProduction{
-resourceToBeDiscounted: Resource
+activate():
}
class Deposit{
+field: type
+addResources(Resource,integer)
+discard(Map<Resource, integer>) : integer
+discard(Resource): boolean
}
class CardLeaderDeck{
+field: type
+method(type): type
}
abstract Marble {
 - color: MarbleColor
 + activate(Player):
 + getColor(): MarbleColor
}
class MarbleRed {
 + activate(Player):
}
class MarbleWhite {
 + activate(Player):
}
class MarbleYellow {
 + activate(Player):
}
class MarbleBlue {
 + activate(Player):
}
class MarbleViolet {
 + activate(Player):
}
@enduml